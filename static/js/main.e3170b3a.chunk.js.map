{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/Scroll.js","Components/SearchBox.js","Components/ErrorBoundry.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","map","user","num","key","Scroll","style","overflowY","border","height","children","SearchBox","Searchfield","searchChange","type","placeholder","onChange","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filterRobots","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"+MAgBeA,EAfJ,SAACC,GAAU,IACZC,EAAeD,EAAfC,KAAKC,EAAUF,EAAVE,MAAMC,EAAIH,EAAJG,GAClB,OAEC,yBAAKC,UAAU,uDACnB,yBAAOC,IAAI,QAAQC,IAAG,+BAA0BH,EAA1B,mBACnB,6BAEG,4BAAKF,GACR,2BAAIC,MCaSK,EApBA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAEhB,OACE,6BAEEA,EAAOC,KAAI,SAACC,EAAKC,GAEpB,OACC,kBAAC,EAAD,CACEC,IAAKD,EACRR,GAAIK,EAAOG,GAAKR,GAChBF,KAAMO,EAAOG,GAAKV,KAClBC,MAAOM,EAAOG,GAAKT,aCNPW,EAPF,SAACb,GACb,OACK,yBAAKc,MAAO,CAACC,UAAU,SAAUC,OAAO,kBAAkBC,OAAO,UAC/DjB,EAAMkB,WCSCC,EAZC,SAAC,GAA6B,EAA5BC,YAA6B,IAAjBC,EAAgB,EAAhBA,aAC9B,OACG,yBAAKjB,UAAU,OAClB,2BACGA,UAAU,oCACVkB,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCUEI,E,kDAhBZ,WAAYzB,GAAO,IAAD,8BACjB,cAAMA,IACD0B,MAAM,CACVC,UAAS,GAHO,E,8DAMAC,EAAMC,GACvBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAG3B,OAAGG,KAAKJ,MAAMC,SACN,wDAEDG,KAAK9B,MAAMkB,a,GAdQc,aC6CZC,E,kDAxCd,aAAc,IAAD,8BACd,gBAmBAC,eAAe,SAACC,GACf,EAAKJ,SAAS,CAACX,YAAYe,EAAMC,OAAOC,SAnBxC,EAAKX,MAAM,CAEXlB,OAAQ,GACRY,YAAY,IALC,E,gEAWM,IAAD,OAClBkB,MAAM,8CACLC,MAAK,SAAAC,GACF,OAAQA,EAASC,UAEpBF,MAAK,SAAAG,GACL,EAAKX,SAAS,CAACvB,OAAOkC,S,+BAMd,IAAD,OACHC,EAAab,KAAKJ,MAAMlB,OAAOoC,QAAO,SAAApC,GACxC,OAAOA,EAAOP,KAAK4C,cAAcC,SAAS,EAAKpB,MAAMN,YAAYyB,kBAEpE,OACC,yBAAKzC,UAAU,MACf,wBAAIA,UAAU,MAAd,kBACA,kBAAC,EAAD,CAAWiB,aAAcS,KAAKI,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,KACD,kBAAC,EAAD,CAAW1B,OAAQmC,W,GAlCFX,aCMEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACR,kBAAC,EAAD,MACAC,SAASC,eAAe,SDyHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAjC,GACLkC,QAAQlC,MAAMA,EAAMmC,a","file":"static/js/main.e3170b3a.chunk.js","sourcesContent":["import React from 'react';\r\nconst Card=(props )=>{ \r\n   const {name,email,id}=props;\r\n   return(\r\n   \t\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n<img   alt=\"robot\" src={`https://robohash.org/${id}?size=200x200`}  />\r\n   <div>\r\n   \r\n      <h2>{name}</h2>\r\n   <p>{email}</p>\r\n   </div>\r\n   </div>\r\n\r\n\t);\r\n}\r\nexport default Card; ","import React from 'react';\r\nimport Card from './Card';\r\n\r\n const CardList=({robots})=>{\r\n  \r\n  return (\r\n    <div>\r\n    {\r\n      robots.map((user,num)=>{\r\n    \r\n   return ( \r\n   \t<Card\r\n   \t  key={num}  \r\n\t  id={robots[num].id}\r\n\t  name={robots[num].name} \r\n\t  email={robots[num].email} \r\n\t />\r\n\t );\r\n \t\t})\r\n    }\r\n  </div>\r\n);\r\n} \r\n export default CardList; \r\n","import React from 'react'\r\n\r\nconst Scroll=(props)=>{\r\n\treturn  (\r\n      <div style={{overflowY:'scroll' ,border:'1px solid black',height:'500px'}} >\r\n       {props.children}\r\n      </div>\r\n\t\t)\r\n}\r\nexport default Scroll;","import React from 'react';\r\n\r\nconst SearchBox=({Searchfield,searchChange})=>{\r\nreturn(\r\n   <div className='pa2'>\r\n<input \r\n   className=\"pa3 ba b--green bg-lightest-blue \"\r\n   type=\"search\" \r\n   placeholder=\"Search Robots\"\r\n   onChange={searchChange}\r\n/>\r\n</div>\r\n\t)\r\n}\r\nexport default SearchBox","import React,{Component} from 'react'\r\n\r\nclass ErrorBoundry extends Component{\r\n   constructor(props){\r\n   \tsuper(props);\r\n   \tthis.state={\r\n   \t\thasError:false\r\n   \t}\r\n   }\r\n   componentDidCatch(error,info){\r\n   \tthis.setState({hasError:true})\r\n   }\r\nrender(){\r\n\tif(this.state.hasError){\r\n\t\treturn <h1>Oooops, That is not good</h1>\r\n\t}\r\n\treturn this.props.children\r\n}\r\n}\r\nexport default ErrorBoundry;","import React,{Component} from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport Scroll from '../Components/Scroll'\r\nimport SearchBox from '../Components/SearchBox';\r\nimport ErrorBoundry from '../Components/ErrorBoundry';\r\n\r\nclass App extends Component{\r\n\tconstructor(){\r\nsuper()\r\n this.state={\r\n\r\n\trobots: [],\r\n\tSearchfield:''\r\n\r\n }\r\n \r\n\t}\r\n\r\ncomponentDidMount(){\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response=>{\r\n     return  response.json();\r\n\t})\r\n\t.then(users=>{\r\n\t\tthis.setState({robots:users})\r\n\t})\r\n\t}\r\nonSearchChange=(event)=>{\r\n\tthis.setState({Searchfield:event.target.value})\t\r\n}\r\n\trender(){\r\nconst filterRobots=this.state.robots.filter(robots=>{\r\n    return robots.name.toLowerCase().includes(this.state.Searchfield.toLowerCase());\r\n})\r\n\treturn( \r\n\t\t<div className=\"tc\">\r\n\t\t<h1 className='f2'>Robots Friends</h1>\r\n\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t<Scroll>\r\n\t\t<ErrorBoundry>\r\n\t<CardList  robots={filterRobots} />\r\n\t </ErrorBoundry>\r\n\t  </Scroll>\r\n\t</div>\r\n\t);\r\n}\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n \nimport App from './Containers/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'tachyons';\nReactDOM.render(\n\t<App/>,\n\tdocument.getElementById('root')\n); \n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n  serviceWorker.unregister();\n  "],"sourceRoot":""}